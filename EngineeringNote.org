#+TIELE: My Engineering Note
#+AUTHOR: Sanglae Kim
#+EMAIL: nova0302@hotmail.com
#+OPTIONS: ^:nil

* Emacs

** 1. Installation of Emacs 24.3 on CentOS 6.5
   - I've been using emacs 24.3 on CentOS 6.5, but I got an error saying "g_settings~~~" after "yum update"
   - This is how i got over the problem.
   - [[http://keik-117.hatenablog.com/entry/2014/07/06/143117][a japanese linke releated to the problem]]
#+begin_src sh
 $ tar zxvf emacs-24.3.tar.gz
 $ cd  emacs-24.3
 $ yum -y install gtk2-devel libXpm-devel libjpeg-turbo-devel libpng-devel giflib-devel libtiff-devel ncurses-devel
 $ ./configure
 $ make
#+end_src

you may get "undefined reference to g_settings~~~", then you do as following.
#+begin_src sh

 $ make distclean
 $ ./configure --without-gsettings
 $ make
 $ make install
#+end_src
** 2. magit
   -[[http://ergoemacs.org/emacs/emacs_magit-mode_tutorial.html][ergoemacs]]

*** 2.1 usage
    - Move cussor to a line, press TAB to toggle diff(magit-toggle-section)
    - open a dired buffer
    - M-x magit-status
    - 's' ~ stage 'S' ~ stage all(magit-stage-item, magit-stage-all)
    - 'u' ~ unstage 'U' ~ unstage all
    - c c to write a commit message, then C-c C-c to commit.(magit-key-mode-popup-committing)
    - P P to push(magit-key-mode-popup-pushing)
    - F F to pull(magit-key-mode-popup-pulling)

** 3. Navigating over balanced expressions
   - C-M-n/p ~ forward-list, backward-list
   - C-M-f/b ~ forward-sexp, backward-sexp
   - C-M-k ~ kill-sexp
   - C-M-SPC mark-sexp

**

** 4. CTags
#+BEGIN_SRC shell
ctags -e -R --extra=+fq --exclude=db --exclude=test --exclude=.git -f TAGS
#+END_SRC
#+BEGIN_SRC lisp
(defun build-ctags (dir-name)
  "Create tags file."
  (interactive "DDirectory: ")
  (shell-command
   (format "ctags -f %s/TAGS -e -R %s" dir-name (directory-file-name dir-name)))
  (message "tags built successfully"))
#+END_SRC
   - [[http://tulrich.com/geekstuff/emacs.html][Ctags]]
   - M-.       goes to the symbol definition
   - M-0 M-.   goes to the next matching definition
   - M-*       return to your starting point
   - M-x tags-search <type your regexp>       initiate a search
   - M-, go to the next match

** 5. Basic usage
   - _*_ ~ search the word under the cursor.



* Working on Linux(CentOS)
** icarus verilog installation
   1. Install gtk+
   2. Install "autoconf" & "gperf"
      > yum -y groupinstall "Development tools"
      > yum -y install gpref
   3. Download iverilog from git
      > git clone git://github.com/steveicarus/iverilog.git
      > cd iverilog
      > sh autoconf.sh
      > ./configure --prefix=/opt/eda_tools/iverilog_root
      > make && make install
   4. Add the installation path to .bash_profile



** Install git 1.8.5.2 from source on CentOS 6.5
   1. [[https://gist.github.com/matthewriley/8319432][A link I reffered]]

   2. I just copied the instruction from the link for convinience.
#+begin_src sh
$ yum -y install zlib-devel openssl-devel cpio expat-devel gettext-devel curl-devel perl-ExtUtils-CBuilder perl-ExtUtils-MakeMaker
$ wget -O v1.8.5.2.tar.gz https://github.com/git/git/archive/v1.8.5.2.tar.gz
$ tar -xzvf ./v1.8.5.2.tar.gz
$ cd git-1.8.5.2/
$ make prefix=/usr/local all
$ make prefix=/usr/local install
$ exit
#+end_src

   3.open a terminal and do as following
#+begin_src sh
$ which git
/usr/local/bin/git

$ git --version
git version 1.8.5.2
#+end_src



* HDL

* Advanced Debug Interface with Altera Virtual JTAG
  1. enable bebugger
     virtual IR shift, IR length = *4* <=
     (0,1, 8,*4*)
        |  |  |-> 4 bit shift
        |  |----> 0x8, the value to be shifted in.
        |-------> 1: IR, 2: DR
  2. Select the submodule.
     virtual DR shift
     (0,2,4,3)
          |   | --> 3 bit shift
          |-------> 0x4("100") top module & submodule 0

  3. Burst Write
     3.1. Burst Setup(*Write*)
	virtual DR shift
	(0,2,"0 0x1 0x00 0x4", 53)
              |   |   |   |    |--> 53bit shift
              |   |   |   |-------> word count
              |   |   |-----------> start address
              |   |-----------------> burst setup write 8-bits words
              |---------------------> top level module select 0: submodule, 1: top module

     3.2. Burst Write
	virtual DR shift
	(0,2,"CRC 0x03..0x00",64)
		|      |       |--> 64bit shift
		|      |-------> data to be written
		|-----------------> crc for the data
  4. Burst Read
     4.1. Burst Setup(*Read*)
	virtual DR shift
	(0,2,"0 0x5 0x00 0x4", 53)
	      |   |   |   |    |--> 53bit shift
	      |   |   |   |-------> word count
	      |   |   |-----------> start address
	      |   |-----------------> burst setup read 8-bits words
	      |---------------------> top level module select 0: submodule, 1: top module
     4.2. Burst Read
	virtual DR shift
	(0,2,"0*(32+32+1), 65)
		     |     |--> 64bit shift
		     |--------> status(1)+crc(32)+data(32)
